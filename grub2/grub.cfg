# GLIM USB GRUB2 Configuration
insmod regexp

# Required for GUI and to prevent "No video mode set" error
insmod all_video

# Keep the same graphic mode for kernel booting (passed as vga=)
# other values are "text" or any gfxmode value
set gfxpayload=keep

# Enable GUI
terminal_output gfxterm

loadfont unicode

insmod png
set theme=${prefix}/themes/invader/theme.txt

set isopath=/boot/iso
probe --set rootuuid --fs-uuid $root
# Required to have these available in other configfile files
export isopath
export rootuuid
export theme

# Like 'loopback loop A', but check if (loop) already exists
function loop {
  if [ -e (loop) ]; then loopback -d loop; fi
  loopback loop "$1"
}

# Order by mtime DESC, literal value ASC
function cmp_mtime_literal {
    if [ "$1" -nt "$2" ]; then
        true
    elif [ "$1" -ot "$2" ]; then
        false
    else
        [ "$1" '<' "$2" ]
    fi
}

# Feed a list of isos (by one) to a callback in a sorted manner. The order is
# set by cmp_mtime_literal function. Args: callback iso1 iso2 ..
function for_each_sorted {
    # We expect the list of isos to come from a pattern expansion. In case the
    # pattern did not expand to anything existing, do nothing.
    if [ ! -e "$2" ]; then return; fi

    set my_callback="$1"
    shift

    # Below we loop over the set of iso files, pick the "best" one (in terms of
    # cmp_mtime_literal) in the current set and exclude it from the set before
    # starting the next iteration. When the "best" iso in the current set is
    # found, we feed it to the callback.

    # In a generic shell "$@" expands to nothing when there are no args. In
    # grubscript it expands to an empty arg. Because of that the loop below can
    # only reduce the list down to two elements. With just two elements left it
    # would run infinitely if allowed.

    while [ $# -gt 2 ]; do
        set my_best="$1"
        shift

        for _ in "$@"; do
            set my_next="$1"
            shift

            if cmp_mtime_literal "$my_next" "$my_best"; then
                # next is better
                setparams "$@" "$my_best"
                set my_best="$my_next"
            else
                # next is nothing special
                setparams "$@" "$my_next"
            fi
        done

        "$my_callback" "$my_best"
    done

    if [ $# -eq 2 ]; then
      if cmp_mtime_literal "$2" "$1"; then
         setparams "$2" "$1"
      fi

      "$my_callback" "$1"
      shift
    fi

    "$my_callback" "$1"
}

# Menu!
# We (ab)use 'for' to check for at least one ISO file to show the menu entry

for isofile in ${isopath}/almalinux/AlmaLinux-*-Live-*.iso; do
  if [ -e "$isofile" ]; then
    menuentry "AlmaLinux >" --class almalinux {
      configfile "${prefix}/inc-almalinux.cfg"
    }
    break
  fi
done

for isofile in ${isopath}/antix/antiX-*-full.iso; do
  if [ -e "$isofile" ]; then
    menuentry "antiX >" --class antix {
      configfile "${prefix}/inc-antix.cfg"
    }
    break
  fi
done

for isofile in ${isopath}/arch/archlinux-*.iso; do
  if [ -e "$isofile" ]; then
    menuentry "Arch Linux >" --class arch {
      configfile "${prefix}/inc-arch.cfg"
    }
    break
  fi
done

for isofile in ${isopath}/artix/artix-*.iso; do
  if [ -e "$isofile" ]; then
    menuentry "Artix >" --class artix {
      configfile "${prefix}/inc-artix.cfg"
    }
    break
  fi
done

for isofile in ${isopath}/bodhi/bodhi-*.iso; do
  if [ -e "$isofile" ]; then
    menuentry "Bodhi Linux >" --class bodhi {
      configfile "${prefix}/inc-bodhi.cfg"
    }
    break
  fi
done

for isofile in ${isopath}/centos/CentOS-*-Live*.iso; do
  if [ -e "$isofile" ]; then
    menuentry "CentOS >" --class centos {
      configfile "${prefix}/inc-centos.cfg"
    }
    break
  fi
done

for isofile in ${isopath}/clonezilla/clonezilla-live-*.iso; do
  if [ -e "$isofile" ]; then
    menuentry "Clonezilla >" --class clonezilla {
      configfile "${prefix}/inc-clonezilla.cfg"
    }
    break
  fi
done

for isofile in ${isopath}/debian/debian-live-*.iso ${isopath}/debian/mini.iso; do
  if [ -e "$isofile" ]; then
    menuentry "Debian >" --class debian {
      configfile "${prefix}/inc-debian.cfg"
    }
    break
  fi
done

for isofile in ${isopath}/elementary/elementaryos-*.iso; do
  if [ -e "$isofile" ]; then
    menuentry "elementary OS >" --class elementary {
      configfile "${prefix}/inc-elementary.cfg"
    }
    break
  fi
done

for isofile in ${isopath}/fedora/Fedora-*.iso; do
  if [ -e "$isofile" ]; then
    menuentry "Fedora >" --class fedora {
      configfile "${prefix}/inc-fedora.cfg"
    }
    break
  fi
done

for isofile in ${isopath}/gentoo/*.iso; do
  if [ -e "$isofile" ]; then
    menuentry "Gentoo >" --class gentoo {
      configfile "${prefix}/inc-gentoo.cfg"
    }
    break
  fi
done

for isofile in ${isopath}/gparted/gparted-live-*.iso; do
  if [ -e "$isofile" ]; then
    menuentry "GParted >" --class gparted {
      configfile "${prefix}/inc-gparted.cfg"
    }
    break
  fi
done

for isofile in ${isopath}/grml/grml*.iso; do
  if [ -e "$isofile" ]; then
    menuentry "Grml >" --class grml {
      configfile "${prefix}/inc-grml.cfg"
    }
    break
  fi
done

for isofile in ${isopath}/ipxe/ipxe*.iso ${isopath}/ipxe/ipxe*.efi; do
  if [ -e "$isofile" ]; then
    menuentry "iPXE >" --class net {
      configfile "${prefix}/inc-ipxe.cfg"
    }
    break
  fi
done

for isofile in ${isopath}/kali/kali-*.iso; do
  if [ -e "$isofile" ]; then
    menuentry "Kali >" --class kali {
      configfile "${prefix}/inc-kali.cfg"
    }
    break
  fi
done

for isofile in ${isopath}/kubuntu/kubuntu-*.iso; do
  if [ -e "$isofile" ]; then
    menuentry "Kubuntu >" --class kubuntu {
      configfile "${prefix}/inc-kubuntu.cfg"
    }
    break
  fi
done

if [ -e "/KERNEL" -a -e "/SYSTEM" ]; then
  menuentry "LibreELEC >" --class libreelec {
    configfile "${prefix}/inc-libreelec.cfg"
  }
fi

for isofile in ${isopath}/linuxmint/linuxmint-*.iso; do
  if [ -e "$isofile" ]; then
    menuentry "Linux Mint >" --class linuxmint {
      configfile "${prefix}/inc-linuxmint.cfg"
    }
    break
  fi
done

for isofile in ${isopath}/manjaro/manjaro-*.iso; do
  if [ -e "$isofile" ]; then
    menuentry "Manjaro >" --class manjaro {
      configfile "${prefix}/inc-manjaro.cfg"
    }
    break
  fi
done

for isofile in ${isopath}/memtest/memtest*.bin ${isopath}/memtest/memtest*.efi; do
  if [ -e "$isofile" ]; then
    menuentry "Memtest >" --class memtest {
      configfile "${prefix}/inc-memtest.cfg"
    }
    break
  fi
done

for isofile in ${isopath}/netrunner/netrunner-*.iso; do
  if [ -e "$isofile" ]; then
    menuentry "Netrunner >" --class netrunner {
      configfile "${prefix}/inc-netrunner.cfg"
    }
    break
  fi
done

for isofile in ${isopath}/openbsd/*.iso; do
  if [ -e "$isofile" ]; then
    menuentry "OpenBSD >" --class openbsd {
      configfile "${prefix}/inc-openbsd.cfg"
    }
    break
  fi
done

for isofile in ${isopath}/peppermint/Peppermint-*.iso; do
  if [ -e "$isofile" ]; then
    menuentry "Peppermint >" --class peppermint {
      configfile "${prefix}/inc-peppermint.cfg"
    }
    break
  fi
done

for isofile in ${isopath}/porteus/Porteus-*.iso; do
  if [ -e "$isofile" ]; then
    menuentry "Porteus >" --class porteus {
      configfile "${prefix}/inc-porteus.cfg"
    }
    break
  fi
done

for isofile in ${isopath}/rhel/rhel-*.iso; do
  if [ -e "$isofile" ]; then
    menuentry "Red Hat Enterprise Linux >" --class redhat {
      configfile "${prefix}/inc-rhel.cfg"
    }
    break
  fi
done

for isofile in ${isopath}/rockylinux/Rocky-*.iso; do
  if [ -e "$isofile" ]; then
    menuentry "Rocky Linux >" --class rockylinux {
      configfile "${prefix}/inc-rockylinux.cfg"
    }
    break
  fi
done

for isofile in ${isopath}/super_grub2_disk_*.iso; do
  if [ -e "$isofile" ]; then
    menuentry "Super Grub2 Disk >" --class disk {
      configfile "${prefix}/inc-supergrub2disk.cfg"
    }
    break
  fi
done

for isofile in ${isopath}/systemrescue/systemrescue-*.iso; do
  if [ -e "$isofile" ]; then
    menuentry "SystemRescue >" --class systemrescue {
      configfile "${prefix}/inc-systemrescue.cfg"
    }
    break
  fi
done

for isofile in ${isopath}/tails/tails-*.iso; do
  if [ -e "$isofile" ]; then
    menuentry "Tails >" --class tails {
      configfile "${prefix}/inc-tails.cfg"
    }
    break
  fi
done

for isofile in ${isopath}/ubuntu/ubuntu-*.iso; do
  if [ -e "$isofile" ]; then
    menuentry "Ubuntu >" --class ubuntu {
      configfile "${prefix}/inc-ubuntu.cfg"
    }
    break
  fi
done

for isofile in ${isopath}/void/void-live-*.iso; do
  if [ -e "$isofile" ]; then
    menuentry "Void >" --class void {
      configfile "${prefix}/inc-void.cfg"
    }
    break
  fi
done

for isofile in ${isopath}/xubuntu/xubuntu-*.iso; do
  if [ -e "$isofile" ]; then
    menuentry "Xubuntu >" --class xubuntu {
      configfile "${prefix}/inc-xubuntu.cfg"
    }
    break
  fi
done

menuentry ' ' { # Empty line
  true
}

if [ "${grub_platform}" = "efi" ]; then
  menuentry "UEFI Firmware Settings" --class uefi {
    fwsetup
  }
fi
menuentry "Reboot" --class shutdown {
  reboot
}
menuentry "Shutdown" --class shutdown {
  halt
}
